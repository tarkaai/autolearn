Title: Milestone 3 - Frontend Integration and Persistence

Summary:
- Develop a modern frontend for the AutoLearn system using create-t3-app with Tailwind CSS and shadcn/ui components.
- Enhance the backend with persistent storage for skills using SQLite database.
- Implement WebSocket for real-time updates between frontend and backend.
- Add support for security features to safely execute generated skills.

Top-level goals (from PRD):
- Create a T3 stack (Next.js, TypeScript, Tailwind, tRPC) frontend with shadcn/ui components for multiple views (chat, code, MCP spec, execution).
- Implement WebSocket connection for real-time updates.
- Enhance the SQLite persistence to fully support skill versioning and management.
- Add execution sandboxing or restricted environment for skills.
- Enable real-time visual feedback on skill generation and execution.

What Copilot should produce (concrete):
1. Frontend components:
   - Chat interface for interacting with the consuming agent
   - Skill viewer for displaying and editing generated Python code
   - MCP viewer showing the current MCP spec in real-time
   - Execution panel for running skills with input parameters
   - Responsive layout with navigation between these views

2. Backend enhancements:
   - WebSocket endpoints for real-time updates
   - Enhance SQLite persistence with versioning and querying
   - Implement simple sandboxing for secure skill execution
   - Add endpoints for frontend integration (session management, history)

3. Integration features:
   - Real-time updates when skills are added/modified
   - Skill execution from frontend with visual feedback
   - Chat session persistence

Style & constraints (must follow):
- Frontend must use T3 stack (Next.js, TypeScript, Tailwind CSS, tRPC) with shadcn/ui components
- Implement typesafe API communication with tRPC or REST endpoints with Zod validation
- WebSocket communication should use standard protocols (Socket.IO or native WebSockets)
- Backend changes must maintain MCP compatibility
- All code must include appropriate error handling and logging
- Security considerations must be clearly documented and implemented
- Frontend should be responsive and work on desktop and tablet devices

APIs (surface contract):
- WebSocket Events:
  - `skill_added`: When a new skill is registered
  - `skill_executed`: When a skill is executed with results
  - `mcp_updated`: When MCP spec changes

- New REST Endpoints:
  - GET /sessions: List active chat sessions
  - POST /sessions: Create a new chat session
  - GET /sessions/{id}: Get chat history for a session
  - POST /sessions/{id}/messages: Add a message to a session

Frontend Components (detailed):
1. ChatView:
   - Message history display with shadcn/ui components
   - Input field for user messages with command palette support
   - Session management (create/switch)
   - Visual indication when agent is generating skills
   - Responsive design with dark/light mode support

2. SkillView:
   - Code editor with syntax highlighting (using Monaco or CodeMirror)
   - Metadata editor with shadcn/ui form components
   - Save/update functionality with optimistic updates
   - Version history with diff view
   - Collapsible sections for different skill parts

3. MCPView:
   - JSON viewer for current MCP spec with syntax highlighting
   - Tool list with descriptions using shadcn/ui cards
   - Visual indication when MCP is updated
   - Search and filter capabilities

4. ExecutionView:
   - Dynamic form for skill parameters using shadcn/ui components
   - Execute button with loading states
   - Results display with formatted JSON output
   - Execution history with timestamps
   - Error handling with descriptive messages

Acceptance criteria (tests to produce):
- Frontend renders all views correctly and navigates between them
- WebSocket connection establishes and receives updates
- New skills appear in MCP spec in real-time
- Skills can be executed from the frontend
- Chat sessions persist between page reloads
- Error states are handled gracefully with user feedback

Edge cases & notes for Copilot:
- Handle WebSocket reconnection on network issues
- Implement proper error boundaries in React
- Ensure skills have proper parameter validation
- Add loading states for all async operations
- Consider CORS and security headers for production
- Implement graceful degradation if WebSockets aren't available

Security & safety checklist:
- Implement basic sandboxing for Python skill execution
- Validate all user inputs on both client and server
- Apply strict Content Security Policy
- Handle errors without exposing sensitive information
- Add rate limiting for skill generation and execution
- Add clear warnings about executing untrusted code

What to hand off to next milestone (explicit TODOs):
- Advanced sandboxing with resource limits
- User authentication and authorization
- Multi-user support
- Performance optimizations for large skill libraries
- Analytics and telemetry
- Deployment packaging and infrastructure

Developer guidance for running locally (short):
- Backend: Use `uvicorn backend.app:app --reload` with OPENAI_API_KEY set
- Frontend: Navigate to `frontend/` and run `npm run dev`
- Open browser to http://localhost:3000 to access the UI
- Use `pytest` to run backend tests and `npm test` for frontend tests

Notes and assumptions:
- The T3 stack frontend provides typesafe communication with the backend
- shadcn/ui components provide a consistent, accessible design system
- WebSocket implementation should support future scaling (multiple servers)
- SQLite is sufficient for this milestone, but design should consider future database migrations
- The frontend should focus on developer experience rather than end-user polish
